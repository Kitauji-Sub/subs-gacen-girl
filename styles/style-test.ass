[Script Info]
Title: New subtitles
ScriptType: v4.00+
WrapStyle: 0
PlayResX: 1920
PlayResY: 1080
ScaledBorderAndShadow: yes

[Aegisub Project Garbage]
Last Style Storage: Default
Video File: ?dummy:24000/1001:300000:1920:1080:182:190:193:c
Video AR Value: 1.777778
Video Zoom Percent: 0.875000
Active Line: 4

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Text_Bottom,獅尾圓體SC-Bold,55,&H00F0F0F0,&H000000FF,&H00444444,&H00000000,0,0,0,0,100,100,0,0,1,3,0,2,10,10,30,1
Style: Text_Top,獅尾圓體SC-Bold,55,&H00F0F0F0,&H000000FF,&H00444444,&H00000000,0,0,0,0,100,100,0,0,1,3,0,8,10,10,30,1
Style: OnScreen,思源黑体,40,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,0,0,2,10,10,10,1
Style: note,思源黑体,50,&H00F0F0F0,&H000000FF,&H002F2F2F,&H00000000,-1,0,0,0,100,100,1.1,0,1,3,0,7,50,10,70,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Comment: 0,0:00:00.00,0:00:00.00,Text_Bottom,settings,0,0,0,code once anystyle,_zh_jp_gap = 42; _zh_jp_gap_top = 63; jp_font_name="獅尾圓體JP-Bold"; jp_scale = 63; ruby_scale =60; ruby_gap=10; reverse_top = true;
Comment: 0,0:00:00.00,0:00:00.00,Text_Bottom,utils,0,0,0,code once anystyle,local re = require('re') local function safe_text_extents(style, text)     if aegisub and aegisub.text_extents then         return aegisub.text_extents(style, text)     else         return 0, 0, 0, 0     end end local function gmatch(str, pattern)     local matches = {}     for match, start_idx, end_idx in re.gfind(str, pattern) do         local groups = re.match(match, pattern)         if not groups then             groups = {}         end         for i = 1, #groups do           groups[i]["first"] = groups[i]["first"] + start_idx - 1           groups[i]["last"] = groups[i]["last"] + start_idx - 1         end         table.insert(matches, groups)     end     return matches end local function remove_tags(text)     if not text then return "" end     return re.sub(text, "\\{[^}]*\\}", "", 0) end local function extract_rubys(text, style)     local rubys = {}     if not text then return rubys end          local current_pos = 0     local clean_text = ""     local original_text = text          for _, ruby_match in _G.ipairs(gmatch(original_text, "\\{ruby=([^}]+)\\}([^{]*?)\\{/ruby\\}")) do         local ruby_text = ruby_match[2].str         local annotated_text = ruby_match[3].str                  local before_text = string.sub(original_text, 1, ruby_match[1].first - 1)         local clean_before_text = remove_tags(before_text)                  local clean_annotated_text = remove_tags(annotated_text)         local annotated_width = 0         if clean_annotated_text ~= "" then             local width, height, descent, ext_lead = safe_text_extents(style, clean_annotated_text)             annotated_width = width or 0         end                  local before_width = 0         if clean_before_text ~= "" then             local width, height, descent, ext_lead = safe_text_extents(style, clean_before_text)             before_width = width or 0         end                  local ruby_pos = before_width + annotated_width / 2                  table.insert(rubys, {             text = ruby_text,             pos = ruby_pos         })                  clean_text = clean_text .. string.sub(before_text, current_pos + 1) .. annotated_text         current_pos = ruby_match[2].last     end          return rubys end function process_bilingual_subtitle(raw_text, style)     if not raw_text or raw_text == "" then         return {             chinese = {text = "", width = 0, height = 0},             japanese = {text = "", width = 0, height = 0},             ruby = {}         }     end          local parts = re.split(raw_text, "\\\\N")          local chinese_text = ""     local japanese_text = ""          if #parts >= 1 then         chinese_text = parts[1] or ""     end     if #parts >= 2 then         japanese_text = parts[2] or ""     end          local rubys = extract_rubys(chinese_text, style)          local chinese_clean = remove_tags(chinese_text)     chinese_clean = re.sub(chinese_clean, "\\{ruby=[^}]+\\}([^{]*?)\\{/ruby\\}", "%1", 0)          local chinese_width, chinese_height = 0, 0     if chinese_clean ~= "" then         local width, height, descent, ext_lead = safe_text_extents(style, chinese_clean)         chinese_width = width or 0         chinese_height = height or 0     end          local japanese_clean = remove_tags(japanese_text)     local japanese_width, japanese_height = 0, 0     if japanese_clean ~= "" then         local width, height, descent, ext_lead = safe_text_extents(style, japanese_clean)         japanese_width = width or 0         japanese_height = height or 0     end        return {         text = chinese_text,         width = chinese_width,         height = chinese_height       },       {         text = japanese_text,         width = japanese_width,         height = japanese_height       },       rubys end
Comment: 0,0:00:00.00,0:00:00.00,Text_Bottom,gv,0,0,0,code line anystyle,chinese, japanese, rubys = process_bilingual_subtitle(orgline.text, orgline.styleref); has_chinese = chinese ~= nil; has_japanese = japanese ~= nil; has_ruby = false; if rubys then for k, ruby in _G.ipairs(rubys) do has_ruby=true end end; zh_jp_gap = japanese and _zh_jp_gap or 0; zh_jp_gap_top = japanese and _zh_jp_gap_top or 0; line_left = (meta.res_x - orgline.eff_margin_l - orgline.eff_margin_r - chinese.width) / 2 + orgline.eff_margin_l; is_top = orgline.styleref.align == 8; local c_pos_x, c_pos_y, j_pos_x, j_pos_y, ruby_pos_y if is_top then   if reverse_top then     if has_ruby then       c_pos_x, c_pos_y = orgline.center, (orgline.top + ruby_gap + (chinese.height * ruby_scale / 100))       j_pos_x, j_pos_y = orgline.center, (orgline.top + ruby_gap + (chinese.height * ruby_scale / 100) + zh_jp_gap_top)       ruby_pos_y = orgline.top     else       c_pos_x, c_pos_y = orgline.center, orgline.top       j_pos_x, j_pos_y = orgline.center, (orgline.top + zh_jp_gap_top)       ruby_pos_y = 0     end   else     c_pos_x, c_pos_y = orgline.center, (orgline.top + zh_jp_gap_top)     j_pos_x, j_pos_y = orgline.center, orgline.top     ruby_pos_y = orgline.bottom + zh_jp_gap_top + ruby_gap   end else   c_pos_x, c_pos_y = orgline.center, (orgline.bottom - zh_jp_gap)   j_pos_x, j_pos_y = orgline.center, orgline.bottom   ruby_pos_y = orgline.top - zh_jp_gap - ruby_gap end chinese_pos_tag = [[\pos(]] .. c_pos_x .. [[,]] .. c_pos_y .. [[)]] japanese_pos_tag = [[\pos(]] .. j_pos_x .. [[,]] .. j_pos_y .. [[)]] ruby_y = ruby_pos_y
Comment: 0,0:00:00.00,0:00:00.00,Text_Bottom,,0,0,0,template line anystyle notext if has_chinese,!relayer(9)!{!chinese_pos_tag!}!chinese.text!
Comment: 0,0:00:00.00,0:00:00.00,Text_Bottom,,0,0,0,template line anystyle notext if has_japanese,!relayer(8)!{!japanese_pos_tag!\fscx!jp_scale!\fscy!jp_scale!\fn!jp_font_name!}!japanese.text!
Comment: 0,0:00:00.00,0:00:00.00,Text_Bottom,,0,0,0,template line anystyle notext if has_ruby,!relayer(9)!{!maxloop("ruby", #rubys)!\pos(!line_left + rubys[loopctx.state.ruby].pos!,!ruby_y!)\fscx!ruby_scale!\fscy!ruby_scale!\bord!line.styleref.outline * 0.8!}!rubys[loopctx.state.ruby].text!
Comment: 0,0:00:00.00,0:00:05.00,Text_Bottom,,0,0,0,kara,正常的中文行\N私は日本語を食べられない
Comment: 0,0:00:00.00,0:00:05.00,Text_Bottom,,1200,0,0,kara,正常的中文行\N私は日本語を食べられない
Comment: 0,0:00:00.00,0:00:05.00,Text_Bottom,,0,1200,0,kara,正常的中文行\N私は日本語を食べられない
Comment: 0,0:00:00.00,0:00:05.00,Text_Top,,0,0,0,kara,正常的顶部中文行\N私は日本語を食べられない
Comment: 0,0:00:00.00,0:00:05.00,Text_Top,,1200,0,0,kara,正常的顶部中文行\N私は日本語を食べられない
Comment: 0,0:00:00.00,0:00:05.00,Text_Top,,0,1200,0,kara,正常的顶部中文行\N私は日本語を食べられない
Comment: 0,0:00:05.00,0:00:07.00,Text_Bottom,,0,0,0,kara,带{ruby=Zhuyin}注音{/ruby}的{ruby=任何东西}中文{/ruby}行\N私は日本語を食べられない
Comment: 0,0:00:05.00,0:00:07.00,Text_Bottom,,1200,0,0,kara,带{ruby=Zhuyin}注音{/ruby}的{ruby=任何东西}中文{/ruby}行\N私は日本語を食べられない
Comment: 0,0:00:05.00,0:00:07.00,Text_Bottom,,0,1200,0,kara,带{ruby=Zhuyin}注音{/ruby}的{ruby=任何东西}中文{/ruby}行\N私は日本語を食べられない
Comment: 0,0:00:05.00,0:00:07.00,Text_Top,,0,0,0,kara,顶部{ruby=Zhuyin}注音{/ruby}的{ruby=任何东西}中文{/ruby}行\N私は日本語を食べられない
Comment: 0,0:00:05.00,0:00:07.00,Text_Top,,1200,0,0,kara,顶部{ruby=Zhuyin}注音{/ruby}的{ruby=任何东西}中文{/ruby}行\N私は日本語を食べられない
Comment: 0,0:00:05.00,0:00:07.00,Text_Top,,0,1200,0,kara,顶部{ruby=Zhuyin}注音{/ruby}的{ruby=任何东西}中文{/ruby}行\N私は日本語を食べられない
